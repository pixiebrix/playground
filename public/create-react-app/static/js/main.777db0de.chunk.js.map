{"version":3,"sources":["pages/Page.jsx","pages/TablePage.jsx","pages/Home.jsx","pages/ApprovePage.jsx","pages/WizardPage.jsx","pages/ModalPage.jsx","pages/FormPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Page","title","children","useEffect","document","CATEGORIES","data","Array","keys","map","x","id","firstName","faker","name","lastName","amount","random","number","category","arrayElement","cleared","TablePage","timestamp","useMemo","Date","toISOString","useImmer","rowData","updateData","className","Button","onClick","alert","variant","Table","striped","bordered","hover","row","index","key","size","Home","ApprovePage","reject","useCallback","window","approve","to","target","BasicTree","tree","step1","step2","step3","error","first","destinations","back","WizardPage","FormModal","useState","show","setShow","handleClose","handleShow","submit","Modal","onHide","Header","closeButton","Title","initialValues","originalAmount","newAmount","onSubmit","values","handleSubmit","Body","Form","Group","controlId","Label","field","Control","readOnly","type","Footer","InfoModal","ModalPage","FormPage","Row","Col","md","orderAmount","refundAmount","App","basename","process","Container","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.777db0de.chunk.js","sourcesContent":["\nimport React, {useEffect} from \"react\";\n\nconst Page = ({title, children}) => {\n\n  useEffect(() => {\n    document.title = `${title} - PixieBrix Sandbox`;\n  }, [title]);\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n\nexport default Page;","\nimport React, {useMemo} from \"react\";\nimport Page from \"./Page\";\nimport {Table, Button} from \"react-bootstrap\";\nimport faker from \"faker\";\nimport { useImmer } from \"use-immer\";\n\n\nconst CURRENCY = \"GBP\";\nconst CATEGORIES = [\"A\", \"B\"];\n\nconst data = [...Array(5).keys()].map(x => ({\n  id: x + 1,\n  firstName: faker.name.firstName(),\n  lastName: faker.name.lastName(),\n  amount: `${faker.random.number()} ${CURRENCY}`,\n  category: faker.random.arrayElement(CATEGORIES),\n  cleared: false,\n}));\n\n\nconst TablePage = () => {\n\n  const timestamp = useMemo(() => new Date().toISOString(), []);\n\n  const [rowData, updateData] = useImmer(data);\n\n  return (\n    <Page title=\"Transaction Table\">\n      <div className=\"py-2 table-actions\">\n        <Button onClick={() => {alert(\"Action #1\")}}>Action #1</Button>\n        <Button onClick={() => {alert(\"Action #2\")}} variant=\"info\" className=\"mx-2\">Action #2</Button>\n        <Button onClick={() => {alert(\"Action #3\")}} variant=\"danger\">Action #3</Button>\n      </div>\n      \n      <div className=\"timestamp\">Table generated at {timestamp}</div>\n\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Category</th>\n            <th>Value</th>\n            <th>Cleared</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rowData.map((row, index) => (\n              <tr key={index}>\n                <td>{row.id}</td>\n                <td>{row.firstName}</td>\n                <td>{row.lastName}</td>\n                <td>{row.category}</td>\n                <td>{row.amount}</td>\n                <td>{row.cleared ? \"Yes\" : \"No\"}</td>\n                <td>\n                  {!row.cleared && (\n                      <Button size=\"sm\" variant=\"info\" onClick={() => updateData((data) => {\n                        data[index].cleared = true;\n                      })}>\n                        Mark Cleared\n                      </Button>\n                  )}\n                </td>\n              </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n\nexport default TablePage;","\nimport React from \"react\";\nimport Page from \"./Page\";\n\nconst Home = () => {\n  return (\n    <Page title=\"Home\">\n      Welcome to the PixieBrix React Sandbox\n    </Page>\n  );\n};\n\nexport default Home;","import React, {useCallback} from \"react\";\nimport Page from \"./Page\";\nimport {Button} from \"react-bootstrap\"\nimport {Link} from \"react-router-dom\";\n\nconst ApprovePage = () => {\n\n  const reject = useCallback(() => {\n    window.alert(\"Rejected\");\n  }, []);\n\n  const approve = useCallback(() => {\n    window.alert(\"Approved\");\n  }, []);\n\n  return (\n    <Page title=\"Approve\">\n      <div className=\"approve-actions\">\n        <Button variant=\"danger\" id=\"rejectBtn\" onClick={reject}>Reject</Button>\n        <Button className=\"mx-2\" id=\"approveBtn\" onClick={approve}>Approve</Button>\n      </div>\n      <div>\n        <ul className=\"mt-2\">\n          <li><Link to=\"/table\" target=\"blank\">Open transaction table</Link></li>\n          <li><Link to=\"/modals\" target=\"blank\">Open other page</Link></li>\n        </ul>\n      </div>\n    </Page>\n  );\n}\n\nexport default ApprovePage;","import React from \"react\";\nimport {Wizard, Step, Controls} from \"react-decision-tree-flow\";\nimport Page from \"./Page\";\n\nexport const BasicTree = () => {\n  const tree = {\n    step1: ['step2'],\n    step2: ['step3', 'error'],\n    step3: [],\n    error: ['step2'],\n  };\n \n  return (\n    <Wizard tree={tree} first=\"step1\">\n      <Step name=\"step1\">\n        <div>\n          I am step 1\n          <br />\n          <Controls>\n            {({ destinations: { step2 } }) => (\n              <button onClick={step2}>Go to Step 2</button>\n            )}\n          </Controls>\n        </div>\n      </Step>\n      <Step name=\"step2\">\n        <div>\n          I am step 2\n          <br />\n          <Controls>\n            {({ destinations: { step3, error } }) => (\n              <div>\n                <button onClick={error}>Go to error</button>\n                <button onClick={step3}>Go to Step 3</button>\n              </div>\n            )}\n          </Controls>\n        </div>\n      </Step>\n      <Step name=\"step3\">\n        <div>I am step 3. No steps after me!</div>\n      </Step>\n      <Step name=\"error\">\n        <div>\n          I am error\n          <br />\n          <Controls>\n            {({ back }) => <button onClick={back}>Go back to Step 2</button>}\n          </Controls>\n        </div>\n      </Step>\n    </Wizard>\n  );\n};\n\nconst WizardPage = () => {\n  return (\n    <Page title=\"Wizard\">\n      \n      <div className=\"wizard\">\n        <div>\n          <h3 className=\"wizard-title\">Example Workflow Name</h3>\n        </div>\n        <div>\n          <BasicTree />\n        </div>\n      </div>\n    </Page>\n  );\n}\n\nexport default WizardPage;\n","import React, {useCallback, useState} from \"react\";\nimport Page from \"./Page\";\nimport {Button, Modal, Form} from \"react-bootstrap\"\nimport { Formik, Field } from 'formik';\n\nconst FormModal = ({className}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = useCallback(() => setShow(false), []);\n  const handleShow = useCallback(() => setShow(true), []);\n\n  const submit = useCallback(() => {\n    window.alert(\"Submitted!\");\n    handleClose();\n  }, [handleClose]);\n\n  return (\n    <>\n      <Button variant=\"info\" className={className} id=\"formBtn\" onClick={handleShow}>Open Form</Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Form Modal</Modal.Title>\n        </Modal.Header>\n\n        <Formik\n          initialValues={{ originalAmount: '6.00', newAmount: '' }}\n          onSubmit={submit}\n        >\n          {({values, handleSubmit}) => (\n            <>\n              <Modal.Body>\n                 <Form.Group controlId=\"modalForm.originalAmount\">\n                  <Form.Label>Original Amount</Form.Label>\n                  <Field name=\"originalAmount\">\n                    {({field}) => <Form.Control readOnly type=\"text\" {...field} />}\n                  </Field>\n                 </Form.Group>\n                 <Form.Group controlId=\"modalForm.newAmount\">\n                  <Form.Label>New Amount</Form.Label>\n                  <Field name=\"newAmount\">\n                    {({field}) => <Form.Control type=\"text\" {...field} />}\n                  </Field>\n                 </Form.Group>\n              </Modal.Body>\n                 <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n            </>\n          )}\n        </Formik>\n      </Modal>\n    </>\n  );\n}\n\n\nconst InfoModal = ({className}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = useCallback(() => setShow(false), []);\n  const handleShow = useCallback(() => setShow(true), []);\n\n  return (\n    <>\n      <Button variant=\"info\" className={className} id=\"infoBtn\" onClick={handleShow}>Open Info</Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Info Modal</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          This is some information!\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\n\n\nconst ModalPage = () => {\n\n  return (\n    <Page title=\"Modal Buttons\">\n      <div className=\"buttons-toolbar\">\n        <FormModal className=\"mx-2\" />        \n        <InfoModal className=\"mx-2\"/>\n      </div>\n    </Page>\n  );\n}\n\nexport default ModalPage;","import React, {useCallback} from \"react\";\nimport Page from \"./Page\";\nimport { Formik, Field } from 'formik';\nimport {Form, Button, Row, Col} from \"react-bootstrap\";\n\nconst FormPage = () => {\n\n  const submit = useCallback(() => {\n    window.alert(\"Submitted refund\");\n  }, []);\n\n  return (\n    <Page title=\"Refund Form\">\n        <Row>\n          <Col md={6} className=\"mx-auto\">\n        <h3>Enter Refund</h3>\n          <Formik\n            initialValues={{ orderAmount: '45.00', refundAmount: '' }}\n            onSubmit={submit}\n          >\n            {({values, handleSubmit}) => (\n              <div>\n                  <Form.Group controlId=\"originalAmount\" className=\"mb-3\">\n                    <Form.Label>Order Amount</Form.Label>\n                    <Field name=\"orderAmount\">\n                      {({field}) => <Form.Control readOnly type=\"text\" {...field} />}\n                    </Field>\n                  </Form.Group>\n                  <Form.Group controlId=\"refundAmount\" className=\"mb-3\">\n                    <Form.Label>Refund Amount</Form.Label>\n                    <Field name=\"refundAmount\">\n                      {({field}) => <Form.Control type=\"text\" {...field} />}\n                    </Field>\n                  </Form.Group>\n            \n                <Button variant=\"primary\" onClick={handleSubmit}>\n                  Submit\n                </Button>\n          </div>\n            )}\n          </Formik>\n          </Col>\n        </Row>\n    </Page>\n  );\n}\n\nexport default FormPage;","import React from 'react';\nimport TablePage from \"./pages/TablePage\";\nimport Home from \"./pages/Home\";\nimport ApprovePage from \"./pages/ApprovePage\";\nimport WizardPage from \"./pages/WizardPage\";\nimport ModalPage from \"./pages/ModalPage\";\nimport FormPage from \"./pages/FormPage\";\nimport {Container, Navbar, Nav} from \"react-bootstrap\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Container>\n        <Navbar expand=\"lg\">\n          <Navbar.Brand href=\"/\">PixieBrix Sandbox</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n           <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n              <Nav.Link as={Link} to=\"/table\">Table</Nav.Link>\n              <Nav.Link as={Link} to=\"/approve\">Approval</Nav.Link>\n              <Nav.Link as={Link} to=\"/modals\">Modals</Nav.Link>\n              <Nav.Link as={Link} to=\"/forms\">Forms</Nav.Link>\n              <Nav.Link as={Link} to=\"/wizard\">Wizard</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n         <Switch>\n            <Route path=\"/table\">\n              <TablePage />\n            </Route>\n            <Route path=\"/approve\">\n              <ApprovePage />\n            </Route>\n            <Route path=\"/modals\">\n              <ModalPage />\n            </Route>\n             <Route path=\"/forms\">\n              <FormPage />\n            </Route>\n            <Route path=\"/wizard\">\n              <WizardPage />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}