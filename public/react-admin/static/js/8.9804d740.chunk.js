(this.webpackJsonpdemo=this.webpackJsonpdemo||[]).push([[8],{1437:function(t,e,n){"use strict";var r=function(){var t=function extendStatics(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function __(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(__.prototype=n.prototype,new __)}}(),o=function(t){function HttpError(e,n,r){void 0===r&&(r=null);var o=t.call(this,e)||this;return o.message=e,o.status=n,o.body=r,Object.setPrototypeOf(o,HttpError.prototype),o.name=o.constructor.name,"function"===typeof Error.captureStackTrace?Error.captureStackTrace(o,o.constructor):o.stack=new Error(e).stack,o.stack=(new Error).stack,o}return r(HttpError,t),HttpError}(Error);e.a=o},1512:function(t,e,n){"use strict";n.r(e),function(t){n.d(e,"createHeadersFromOptions",(function(){return a})),n.d(e,"fetchJson",(function(){return i})),n.d(e,"queryParameters",(function(){return s})),n.d(e,"flattenObject",(function(){return u}));var r=n(1437),o=n(128),__assign=function(){return(__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},__spreadArray=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},a=function createHeadersFromOptions(t){var e=t.headers||new Headers({Accept:"application/json"});return e.has("Content-Type")||t&&(!t.method||"GET"===t.method)||t&&t.body&&t.body instanceof FormData||e.set("Content-Type","application/json"),t.user&&t.user.authenticated&&t.user.token&&e.set("Authorization",t.user.token),e},i=function fetchJson(t,e){void 0===e&&(e={});var n=a(e);return fetch(t,__assign(__assign({},e),{headers:n})).then((function(t){return t.text().then((function(e){return{status:t.status,statusText:t.statusText,headers:t.headers,body:e}}))})).then((function(t){var e,n=t.status,o=t.statusText,a=t.headers,i=t.body;try{e=JSON.parse(i)}catch(s){}return n<200||n>=300?Promise.reject(new r.a(e&&e.message||o,n,e)):Promise.resolve({status:n,headers:a,body:i,json:e})}))},s=o.stringify,u=function flattenObject(e,n){var r;return void 0===n&&(n=[]),function isValidObject(e){if(!e)return!1;var n=Array.isArray(e),r="undefined"!==typeof t&&t.isBuffer(e),o="[object Object]"===Object.prototype.toString.call(e),a=!!Object.keys(e).length;return!n&&!r&&o&&a}(e)?Object.assign.apply(Object,__spreadArray([{}],Object.keys(e).map((function(t){return flattenObject(e[t],n.concat([t]))})),!1)):n.length?((r={})[n.join(".")]=e,r):e}}.call(this,n(682).Buffer)},162:function(t,e,n){"use strict";var r=n(1512);n.d(e,"a",(function(){return r}))},1890:function(t,e,n){"use strict";n.r(e);var r,o,a,i=n(128),s=n(162),__assign=function(){return(__assign=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},u=(r="http://localhost:4000",void 0===o&&(o=s.a.fetchJson),void 0===a&&(a="Content-Range"),{getList:function getList(t,e){var n=e.pagination,s=n.page,u=n.perPage,c=e.sort,f=c.field,d=c.order,p=(s-1)*u,h=s*u-1,l={sort:JSON.stringify([f,d]),range:JSON.stringify([p,h]),filter:JSON.stringify(e.filter)},y=r+"/"+t+"?"+Object(i.stringify)(l),g="Content-Range"===a?{headers:new Headers({Range:t+"="+p+"-"+h})}:{};return o(y,g).then((function(t){var e=t.headers,n=t.json;if(!e.has(a))throw new Error("The "+a+" header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare "+a+" in the Access-Control-Expose-Headers header?");return{data:n,total:"Content-Range"===a?parseInt(e.get("content-range").split("/").pop(),10):parseInt(e.get(a.toLowerCase()))}}))},getOne:function getOne(t,e){return o(r+"/"+t+"/"+e.id).then((function(t){return{data:t.json}}))},getMany:function getMany(t,e){var n={filter:JSON.stringify({id:e.ids})},a=r+"/"+t+"?"+Object(i.stringify)(n);return o(a).then((function(t){return{data:t.json}}))},getManyReference:function getManyReference(t,e){var n,s=e.pagination,u=s.page,c=s.perPage,f=e.sort,d=f.field,p=f.order,h=(u-1)*c,l=u*c-1,y={sort:JSON.stringify([d,p]),range:JSON.stringify([(u-1)*c,u*c-1]),filter:JSON.stringify(__assign(__assign({},e.filter),(n={},n[e.target]=e.id,n)))},g=r+"/"+t+"?"+Object(i.stringify)(y),O="Content-Range"===a?{headers:new Headers({Range:t+"="+h+"-"+l})}:{};return o(g,O).then((function(t){var e=t.headers,n=t.json;if(!e.has(a))throw new Error("The "+a+" header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare "+a+" in the Access-Control-Expose-Headers header?");return{data:n,total:"Content-Range"===a?parseInt(e.get("content-range").split("/").pop(),10):parseInt(e.get(a.toLowerCase()))}}))},update:function update(t,e){return o(r+"/"+t+"/"+e.id,{method:"PUT",body:JSON.stringify(e.data)}).then((function(t){return{data:t.json}}))},updateMany:function updateMany(t,e){return Promise.all(e.ids.map((function(n){return o(r+"/"+t+"/"+n,{method:"PUT",body:JSON.stringify(e.data)})}))).then((function(t){return{data:t.map((function(t){return t.json.id}))}}))},create:function create(t,e){return o(r+"/"+t,{method:"POST",body:JSON.stringify(e.data)}).then((function(t){var n=t.json;return{data:__assign(__assign({},e.data),{id:n.id})}}))},delete:function _delete(t,e){return o(r+"/"+t+"/"+e.id,{method:"DELETE",headers:new Headers({"Content-Type":"text/plain"})}).then((function(t){return{data:t.json}}))},deleteMany:function deleteMany(t,e){return Promise.all(e.ids.map((function(e){return o(r+"/"+t+"/"+e,{method:"DELETE",headers:new Headers({"Content-Type":"text/plain"})})}))).then((function(t){return{data:t.map((function(t){return t.json.id}))}}))}}),c=new Proxy(u,{get:function get(t,e,n){return"then"===e?n:function(t,n){return new Promise((function(r){return setTimeout((function(){return r(u[e](t,n))}),500)}))}}});e.default=c}}]);
//# sourceMappingURL=8.9804d740.chunk.js.map